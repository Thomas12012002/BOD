# -*- coding: utf-8 -*-
"""draft of final ResearchIdea.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VYxglivrwnrh6zk7NsLbatS7Yd4EtG1o
"""

import pandas as pd
import random

row=10000
column=3

# Creating initial DataFrames with unique column names from 'A' to 'H' for each DataFrame and 40 rows with values in range 1 to 1000
data1 = {chr(65 + i) + '_1': [random.randint(1, 1000) for _ in range(row)] for i in range(column)}
data2 = {chr(65 + i) + '_2': [random.randint(1, 1000) for _ in range(row)] for i in range(column)}
data3 = {chr(65 + i) + '_3': [random.randint(1, 1000) for _ in range(row)] for i in range(column)}

df1 = pd.DataFrame(data1)
df2 = pd.DataFrame(data2)
df3 = pd.DataFrame(data3)

# # Displaying initial DataFrames with unique column names and values in the range 1 to 1000 for 40 rows
# print("Initial DataFrame 1 with unique column names and values in range 1 to 1000:")
# print(df1)

# print("\nInitial DataFrame 2 with unique column names and values in range 1 to 1000:")
# print(df2)

# print("\nInitial DataFrame 3 with unique column names and values in range 1 to 1000:")
# print(df3)

import pandas as pd


# Concatenate DataFrames horizontally along columns
combined_df = pd.concat([df1, df2, df3], axis=1)

# Display the combined DataFrame
print("Combined DataFrame:")
# print(combined_df)

# Selecting specific columns from the combined DataFrame
selected_columns = combined_df[['A_2', 'B_1', 'C_3']]

# # Display the selected columns from the combined DataFrame
# print("\nSelected Columns:")
# print(selected_columns)

#real one#######################
import string
# Creating a sequence of letters ('a', 'b', 'c', ...) to use for renaming
letters = string.ascii_lowercase[:len(combined_df.columns)]

# Renaming columns with letters
new_column_names = {col: f'new_{letter}' for col, letter in zip(combined_df.columns, letters)}

# Applying the new column names to the DataFrame
combined_df.rename(columns=new_column_names, inplace=True)

# # Display the DataFrame after renaming columns
# print(combined_df)


# Copying the contents of combined_df to a new DataFrame named new_combined_df
new_combined_df = combined_df.copy()

# Setting all values in each column to None (null)
for col in new_combined_df.columns:
    new_combined_df[col] = None

# Normalizing values in new_combined_df
for col in combined_df.columns:
    max_value = combined_df[col].max()  # Get the maximum value in the column
    for idx, value in enumerate(combined_df[col]):
        normalized_value = value / max_value  # Normalize each value
        new_combined_df.at[idx, col] = normalized_value  # Update the corresponding value in new_combined_df

# print(new_combined_df)

# Selecting specific columns from the combined DataFrame
selected_columns_1 = new_combined_df[['new_b', 'new_d', 'new_i']]

# # Display the selected columns from the combined DataFrame
# print("\nSelected Columns:")
# print(selected_columns_1)

# Find the maximum sum among all rows
max_row_sum_1 = selected_columns_1.sum(axis=1).max()
print(max_row_sum_1)

# Find the index of the row(s) with the maximum sum among all rows
max_sum_index_1 = selected_columns_1.sum(axis=1).idxmax()
print(max_sum_index_1)

y_min_1=max_row_sum_1

# Calculate the sum of values in the row with index max_sum_index
y_max_1 = new_combined_df.loc[max_sum_index_1].sum()
print(y_max_1)

sum_all_rows_1=new_combined_df.sum(axis=1)
# print(sum_all_rows)

return_sum_list_1=[]
return_index_list_1=[]
for i in sum_all_rows_1:
  if i<=y_max_1 and i>= y_min_1:
    return_sum_list_1.append(i)

for idx, i in enumerate(new_combined_df.sum(axis=1)):
    for j in return_sum_list_1:
        if i == j:
            return_index_list_1.append(idx)

# print(return_index_list)
distinct_values_1 = list(set(return_index_list_1))
print(distinct_values_1)

a=0
for i in range(len(distinct_values_1)):
  a+=1
print(a)

######################################################## ROUND 2 ############################################################

# List of specific indices to select is distinct_values_1
# Selecting rows with specific indices using iloc and creating a new DataFrame with the same index
filter_1st_dataframe = new_combined_df.iloc[distinct_values_1].copy()

# Selecting specific columns from the combined DataFrame
selected_columns_2 = filter_1st_dataframe[['new_b', 'new_d', 'new_i','new_c','new_e','new_h']]

# # Display the selected columns from the combined DataFrame
# print("\nSelected Columns:")
# print(selected_columns_2)

# Find the maximum sum among all rows
max_row_sum_2 = selected_columns_2.sum(axis=1).max()
print(max_row_sum_2)

# Find the index of the row(s) with the maximum sum among all rows
max_sum_index_2 = selected_columns_2.sum(axis=1).idxmax()
print(max_sum_index_2)

y_min_2=max_row_sum_2

# Calculate the sum of values in the row with index max_sum_index
y_max_2 = filter_1st_dataframe.loc[max_sum_index_2].sum()
print(y_max_2)

sum_all_rows_2=filter_1st_dataframe.sum(axis=1)
# print(sum_all_rows)

return_sum_list_2=[]
return_index_list_2=[]
for i in sum_all_rows_2:
  if i<=y_max_2 and i>= y_min_2:
    return_sum_list_2.append(i)

for idx, i in enumerate(filter_1st_dataframe.sum(axis=1)):
    for j in return_sum_list_2:
        if i == j:
            return_index_list_2.append(idx)

# print(return_index_list)
distinct_values_2 = list(set(return_index_list_2))
print(distinct_values_2)

b=0
for i in range(len(distinct_values_2)):
  b+=1
print(b)

######################################################## ROUND 3 - final round in 3 columns table ############################################################

# List of specific indices to select is distinct_values_2
# Selecting rows with specific indices using iloc and creating a new DataFrame with the same index
filter_2nd_theFinal_dataframe = filter_1st_dataframe.iloc[distinct_values_2].copy()

# Selecting specific columns from the combined DataFrame
selected_columns_3 = filter_2nd_theFinal_dataframe

# # Display the selected columns from the combined DataFrame
# print("\nSelected Columns:")
# print(selected_columns_3)

# Find the maximum sum among all rows
max_row_sum_3 = selected_columns_3.sum(axis=1).max()
print(max_row_sum_3)

# Find the index of the row(s) with the maximum sum among all rows
max_sum_index_3 = selected_columns_3.sum(axis=1).idxmax()
print(max_sum_index_3)

y_min_3=max_row_sum_3

# Calculate the sum of values in the row with index max_sum_index
y_max_3 = filter_2nd_theFinal_dataframe.loc[max_sum_index_3].sum()
print(y_max_3)

sum_all_rows_3=filter_2nd_theFinal_dataframe.sum(axis=1)
# print(sum_all_rows)

return_sum_list_3=[]
return_index_list_3=[]
for i in sum_all_rows_3:
  if i<=y_max_3 and i>= y_min_3:
    return_sum_list_3.append(i)

for idx, i in enumerate(filter_2nd_theFinal_dataframe.sum(axis=1)):
    for j in return_sum_list_3:
        if i == j:
            return_index_list_3.append(idx)

# print(return_index_list)
distinct_values_3 = list(set(return_index_list_3))
print(distinct_values_3)

c=0
for i in range(len(distinct_values_3)):
  c+=1
print(c)